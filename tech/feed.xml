<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ProgramMur - 程序猿碎念</title><link>https://blog.androchen.tw/tech/</link><description>Recent content on ProgramMur - 程序猿碎念</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>androchentw@gmail.com (androchentw)</managingEditor><webMaster>androchentw@gmail.com (androchentw)</webMaster><lastBuildDate>Sun, 28 Aug 2022 03:08:16 +0800</lastBuildDate><atom:link href="https://blog.androchen.tw/tech/feed.xml" rel="self" type="application/rss+xml"/><item><title>自動化測試的 7 種類型</title><link>https://blog.androchen.tw/7-types-of-test-automation/</link><pubDate>Sun, 28 Aug 2022 03:08:16 +0800</pubDate><author>androchentw@gmail.com (androchentw)</author><guid>https://blog.androchen.tw/7-types-of-test-automation/</guid><description>&lt;img style="width:60%;" src="https://i.imgur.com/Qe3Dzt6.png">
&lt;p align="center">&lt;sub>&lt;sup>
Photo by &lt;a href="https://unsplash.com/@clemhlrdt?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Clément Hélardot&lt;/a> on &lt;a href="https://unsplash.com/collections/SV-KO-htOoM/tech?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash&lt;/a>
&lt;/sup>&lt;/sub>&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>測試種類百百種, 你測的是哪一種? 該測的又是哪一種? 讓我們來一探究竟!
本文暫不討論為何要寫測試, 效益為何. 有興趣的朋友敬請期待下一篇文章 :P&lt;/p>
&lt;p>一言以蔽之就是品質. 不測試的話就只是盲目地相信自己的程式碼永遠都會正常運作. 而這個信仰通常十分薄弱, 基本上都只是落入維運時 見一個修一個, 很難查 root cause 的惡性循環.
細節就留待我最近邊學 TDD 時再來記錄囉~&lt;/p>
&lt;h3 id="challenges">Challenges&lt;/h3>
&lt;ul>
&lt;li>測試初心者, 不確定該寫哪些測試才是有效的 (Effective &amp;amp; Efficient)&lt;/li>
&lt;/ul>
&lt;h3 id="objectives">Objectives&lt;/h3>
&lt;ol>
&lt;li>瞭解自動化測試的類型與其定義&lt;/li>
&lt;li>建立測試範例程式碼, 結合 &lt;a href="https://github.com/androchentw/python-playground">python-playground&lt;/a>. 詳見 {{ ref . &amp;ldquo;python/2022-08-16-github-python-playground&amp;rdquo; }}&lt;/li>
&lt;/ol>
&lt;h3 id="krs">KRs&lt;/h3>
&lt;ol>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 2022-08/E 初版完成。&lt;/li>
&lt;/ol></description></item><item><title>Github - Python Playground</title><link>https://blog.androchen.tw/github-python-playground/</link><pubDate>Tue, 16 Aug 2022 13:30:16 +0800</pubDate><author>androchentw@gmail.com (androchentw)</author><guid>https://blog.androchen.tw/github-python-playground/</guid><description>&lt;img style="width:60%;" src="https://i.imgur.com/Qe3Dzt6.png">
&lt;p align="center">&lt;sub>&lt;sup>
Photo by &lt;a href="https://unsplash.com/@clemhlrdt?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Clément Hélardot&lt;/a> on &lt;a href="https://unsplash.com/collections/SV-KO-htOoM/tech?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash&lt;/a>
&lt;/sup>&lt;/sub>&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;h3 id="challenges">Challenges&lt;/h3>
&lt;p>不管是 SRE 或是其他簡單的小腳本，在工作上越來越多場合要開始寫 python 來自動化處理一些繁瑣的事項。&lt;/p>
&lt;p>習慣性地就想要建立一個 library，邊學邊整理。&lt;/p>
&lt;h3 id="objectives">Objectives&lt;/h3>
&lt;ol>
&lt;li>建立清楚易用的 Python Github repository as utils library.&lt;/li>
&lt;/ol>
&lt;h3 id="krs">KRs&lt;/h3>
&lt;ol>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 2022-08/E 初版完成。&lt;/li>
&lt;/ol></description></item><item><title>Golang Learn</title><link>https://blog.androchen.tw/golang-learn/</link><pubDate>Sat, 17 Jul 2021 10:13:58 +0800</pubDate><author>androchentw@gmail.com (androchentw)</author><guid>https://blog.androchen.tw/golang-learn/</guid><description>&lt;img style="width:40%;" src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Go_Logo_Blue.svg/440px-Go_Logo_Blue.svg.png">
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;a href="https://blog.androchen.tw/setup-blog-hugo/">從 Ghost 搬來 Hugo 後&lt;/a>, 終於更積極地回歸 blog 了&amp;hellip; 今天要來立下學 golang 的 flag 😂&lt;/p>
&lt;p>作為新手, 條列一些觀察與期許&lt;/p>
&lt;h3 id="challenges">Challenges&lt;/h3>
&lt;ol>
&lt;li>Profile: Data Engineer&lt;/li>
&lt;li>Jobs
&lt;ol>
&lt;li>Deliver data to value by designing and implementing data pipeline&lt;/li>
&lt;li>Maintain operations and continuously improve service levels&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="objectives">Objectives&lt;/h3>
&lt;ol>
&lt;li>Master 1 programming language to better understand the mechanism and principle of Dev &amp;amp; Ops .&lt;/li>
&lt;li>Manage Ops in software engineering way like &lt;a href="https://blog.androchen.tw/google-sre-books/">&lt;code>class SRE implements DevOps&lt;/code>&lt;/a>.&lt;/li>
&lt;/ol>
&lt;h3 id="krs">KRs&lt;/h3>
&lt;ol>
&lt;li>&lt;input disabled="" type="checkbox"> 2021-08 Complete &lt;a href="https://gobyexample.com/">Go by Example&lt;/a> and get familiar with VS Code extensions.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2021-09 Setup lightweight web server with modern frontend and backend framework to handle form input, api and authentication.&lt;/li>
&lt;/ol></description></item><item><title>Google SRE Books</title><link>https://blog.androchen.tw/google-sre-books/</link><pubDate>Sun, 11 Jul 2021 00:58:14 +0800</pubDate><author>androchentw@gmail.com (androchentw)</author><guid>https://blog.androchen.tw/google-sre-books/</guid><description>&lt;img style="width:40%;" src="https://lh3.googleusercontent.com/A-7rSIEgq-hwTETYDdYrcDQ6sftGmy0-a0LkQyvt2lrFy2p7QejyOGxhaCKDM74KmYqhqRkw63eCVfJFssRa023x0suoEgdOMZv9">
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Google 推行 SRE 也已經好一陣子, 十分認同其中的各種想法與作法. 最近終於能有機會好好整理讀書心得筆記, 持續學習.&lt;/p>
&lt;p>因為內容很多, 所以打算以系列文的方式, 不定期地更新內容, 這篇會作為 Summary 使用. 一來紀錄緣由, 二來追蹤進度.&lt;/p>
&lt;h3 id="challenges">Challenges&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Hybrid Cloud Environment Complexity Grows&lt;/strong>. 身為 IT, 在 Hybrid Cloud 環境與 Micro-service 趨勢下, 帶來的是更多的 Dependency 以及更為複雜的資料流.&lt;/li>
&lt;li>&lt;strong>Hard to Prove and Maintain Reliability&lt;/strong>. 在設計 Data Pipeline 的過程中, 除了最終要 Deliver Data to Value 以達到 Business Impact 外, 更需要確保每天的 Data &amp;amp; Services Quality &amp;amp; Reliability, 甚至可以說是服務上線後天天都會遇到的事.&lt;/li>
&lt;li>&lt;strong>Often Without Clear Value Proposition&lt;/strong>. 而這些日常維運繁瑣的事務其實有很多可以用工程手段解決/自動化的部分, 但是卻非常容易在繁忙且接踵而來的專案下, 不自覺地疏忽了.&lt;/li>
&lt;li>&lt;strong>Prioritize ITOps Tasks&lt;/strong>: 為了及早發現及早還技術債, 應該更有意識地持續分析:
&lt;ol>
&lt;li>哪些該先做, 成本效益最佳?&lt;/li>
&lt;li>鎖定目標後, 又該如何實作, 才能真的事半功倍?&lt;/li>
&lt;li>實作完成後, 如何良好衡量優化效益?&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="objectives">Objectives&lt;/h3>
&lt;ul>
&lt;li>Learn from Google SRE books
&lt;ul>
&lt;li>then introduce and continuously implement and improve current data services design reliability at work.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="krs">KRs&lt;/h3>
&lt;ol>
&lt;li>&lt;input disabled="" type="checkbox"> 2021-12 完讀 &lt;a href="https://sre.google/workbook/table-of-contents/">The Site Reliability Workbook&lt;/a> (實作細節, 實例)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2021-12 完讀 &lt;a href="https://sre.google/sre-book/table-of-contents/">Site Reliability Engineering&lt;/a> (概念, 文化)&lt;/li>
&lt;/ol></description></item></channel></rss>